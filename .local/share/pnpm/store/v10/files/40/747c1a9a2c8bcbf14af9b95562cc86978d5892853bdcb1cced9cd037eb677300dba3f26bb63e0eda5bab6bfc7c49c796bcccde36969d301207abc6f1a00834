// src/index.ts
import { NATIVE_MINT as NATIVE_MINT3 } from "@solana/spl-token";

// src/GambaProvider.ts
import * as anchor from "@coral-xyz/anchor";
import { ASSOCIATED_TOKEN_PROGRAM_ID, TOKEN_PROGRAM_ID, getAssociatedTokenAddressSync as getAssociatedTokenAddressSync2 } from "@solana/spl-token";
import { AddressLookupTableProgram, Keypair, PublicKey as PublicKey3, SYSVAR_RENT_PUBKEY, SystemProgram } from "@solana/web3.js";

// src/constants.ts
import { PublicKey } from "@solana/web3.js";
var PROGRAM_ID = new PublicKey("Gamba2hK6KV3quKq854B3sQG1WMdq3zgQLPKqyK4qS18");
var SYSTEM_PROGRAM = new PublicKey("11111111111111111111111111111111");
var GAME_SEED = "GAME";
var PLAYER_SEED = "PLAYER";
var POOL_SEED = "POOL";
var GAMBA_STATE_SEED = "GAMBA_STATE";
var POOL_ATA_SEED = "POOL_ATA";
var POOL_JACKPOT_SEED = "POOL_JACKPOT";
var POOL_BONUS_UNDERLYING_TA_SEED = "POOL_BONUS_UNDERLYING_TA";
var POOL_BONUS_MINT_SEED = "POOL_BONUS_MINT";
var POOL_LP_MINT_SEED = "POOL_LP_MINT";

// src/idl.ts
var IDL = {
  "version": "0.1.0",
  "name": "gamba",
  "instructions": [
    {
      "name": "gambaInitialize",
      "accounts": [
        {
          "name": "initializer",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "gambaState",
          "isMut": true,
          "isSigner": false,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "type": "string",
                "value": "GAMBA_STATE"
              }
            ]
          }
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": []
    },
    {
      "name": "gambaSetAuthority",
      "accounts": [
        {
          "name": "authority",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "gambaState",
          "isMut": true,
          "isSigner": false,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "type": "string",
                "value": "GAMBA_STATE"
              }
            ]
          },
          "relations": [
            "authority"
          ]
        }
      ],
      "args": [
        {
          "name": "authority",
          "type": "publicKey"
        }
      ]
    },
    {
      "name": "gambaSetConfig",
      "accounts": [
        {
          "name": "authority",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "gambaState",
          "isMut": true,
          "isSigner": false,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "type": "string",
                "value": "GAMBA_STATE"
              }
            ]
          },
          "relations": [
            "authority"
          ]
        }
      ],
      "args": [
        {
          "name": "rngAddress",
          "type": "publicKey"
        },
        {
          "name": "gambaFee",
          "type": "u64"
        },
        {
          "name": "maxCreatorFee",
          "type": "u64"
        },
        {
          "name": "poolCreationFee",
          "type": "u64"
        },
        {
          "name": "antiSpamFee",
          "type": "u64"
        },
        {
          "name": "maxHouseEdge",
          "type": "u64"
        },
        {
          "name": "defaultPoolFee",
          "type": "u64"
        },
        {
          "name": "jackpotPayoutToUserBps",
          "type": "u64"
        },
        {
          "name": "jackpotPayoutToCreatorBps",
          "type": "u64"
        },
        {
          "name": "jackpotPayoutToPoolBps",
          "type": "u64"
        },
        {
          "name": "jackpotPayoutToGambaBps",
          "type": "u64"
        },
        {
          "name": "bonusToJackpotRatioBps",
          "type": "u64"
        },
        {
          "name": "maxPayoutBps",
          "type": "u64"
        },
        {
          "name": "poolWithdrawFeeBps",
          "type": "u64"
        },
        {
          "name": "poolCreationAllowed",
          "type": "bool"
        },
        {
          "name": "poolDepositAllowed",
          "type": "bool"
        },
        {
          "name": "poolWithdrawAllowed",
          "type": "bool"
        },
        {
          "name": "playingAllowed",
          "type": "bool"
        },
        {
          "name": "distributionRecipient",
          "type": "publicKey"
        }
      ]
    },
    {
      "name": "poolInitialize",
      "accounts": [
        {
          "name": "initializer",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "gambaState",
          "isMut": true,
          "isSigner": false,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "type": "string",
                "value": "GAMBA_STATE"
              }
            ]
          }
        },
        {
          "name": "underlyingTokenMint",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "pool",
          "isMut": true,
          "isSigner": false,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "type": "string",
                "value": "POOL"
              },
              {
                "kind": "account",
                "type": "publicKey",
                "account": "Mint",
                "path": "underlying_token_mint"
              },
              {
                "kind": "arg",
                "type": "publicKey",
                "path": "pool_authority"
              }
            ]
          }
        },
        {
          "name": "poolUnderlyingTokenAccount",
          "isMut": true,
          "isSigner": false,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "type": "string",
                "value": "POOL_ATA"
              },
              {
                "kind": "account",
                "type": "publicKey",
                "account": "Pool",
                "path": "pool"
              }
            ]
          }
        },
        {
          "name": "poolBonusUnderlyingTokenAccount",
          "isMut": true,
          "isSigner": false,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "type": "string",
                "value": "POOL_BONUS_UNDERLYING_TA"
              },
              {
                "kind": "account",
                "type": "publicKey",
                "account": "Pool",
                "path": "pool"
              }
            ]
          }
        },
        {
          "name": "poolJackpotTokenAccount",
          "isMut": true,
          "isSigner": false,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "type": "string",
                "value": "POOL_JACKPOT"
              },
              {
                "kind": "account",
                "type": "publicKey",
                "account": "Pool",
                "path": "pool"
              }
            ]
          }
        },
        {
          "name": "gambaStateAta",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "lpMint",
          "isMut": true,
          "isSigner": false,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "type": "string",
                "value": "POOL_LP_MINT"
              },
              {
                "kind": "account",
                "type": "publicKey",
                "account": "Pool",
                "path": "pool"
              }
            ]
          }
        },
        {
          "name": "lpMintMetadata",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "bonusMint",
          "isMut": true,
          "isSigner": false,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "type": "string",
                "value": "POOL_BONUS_MINT"
              },
              {
                "kind": "account",
                "type": "publicKey",
                "account": "Pool",
                "path": "pool"
              }
            ]
          }
        },
        {
          "name": "bonusMintMetadata",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "associatedTokenProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "tokenProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "rent",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "tokenMetadataProgram",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "poolAuthority",
          "type": "publicKey"
        },
        {
          "name": "lookupAddress",
          "type": "publicKey"
        }
      ]
    },
    {
      "name": "poolDeposit",
      "accounts": [
        {
          "name": "user",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "gambaState",
          "isMut": false,
          "isSigner": false,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "type": "string",
                "value": "GAMBA_STATE"
              }
            ]
          }
        },
        {
          "name": "pool",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "poolUnderlyingTokenAccount",
          "isMut": true,
          "isSigner": false,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "type": "string",
                "value": "POOL_ATA"
              },
              {
                "kind": "account",
                "type": "publicKey",
                "account": "Pool",
                "path": "pool"
              }
            ]
          }
        },
        {
          "name": "lpMint",
          "isMut": true,
          "isSigner": false,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "type": "string",
                "value": "POOL_LP_MINT"
              },
              {
                "kind": "account",
                "type": "publicKey",
                "account": "Pool",
                "path": "pool"
              }
            ]
          }
        },
        {
          "name": "underlyingTokenMint",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "userUnderlyingAta",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "userLpAta",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "associatedTokenProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "tokenProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "amount",
          "type": "u64"
        }
      ]
    },
    {
      "name": "poolWithdraw",
      "accounts": [
        {
          "name": "user",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "pool",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "poolUnderlyingTokenAccount",
          "isMut": true,
          "isSigner": false,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "type": "string",
                "value": "POOL_ATA"
              },
              {
                "kind": "account",
                "type": "publicKey",
                "account": "Pool",
                "path": "pool"
              }
            ]
          }
        },
        {
          "name": "lpMint",
          "isMut": true,
          "isSigner": false,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "type": "string",
                "value": "POOL_LP_MINT"
              },
              {
                "kind": "account",
                "type": "publicKey",
                "account": "Pool",
                "path": "pool"
              }
            ]
          }
        },
        {
          "name": "underlyingTokenMint",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "userUnderlyingAta",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "userLpAta",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "gambaState",
          "isMut": false,
          "isSigner": false,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "type": "string",
                "value": "GAMBA_STATE"
              }
            ]
          }
        },
        {
          "name": "associatedTokenProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "tokenProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "amount",
          "type": "u64"
        }
      ]
    },
    {
      "name": "poolMintBonusTokens",
      "accounts": [
        {
          "name": "user",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "pool",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "gambaState",
          "isMut": false,
          "isSigner": false,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "type": "string",
                "value": "GAMBA_STATE"
              }
            ]
          }
        },
        {
          "name": "underlyingTokenMint",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "poolBonusUnderlyingTokenAccount",
          "isMut": true,
          "isSigner": false,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "type": "string",
                "value": "POOL_BONUS_UNDERLYING_TA"
              },
              {
                "kind": "account",
                "type": "publicKey",
                "account": "Pool",
                "path": "pool"
              }
            ]
          }
        },
        {
          "name": "bonusMint",
          "isMut": true,
          "isSigner": false,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "type": "string",
                "value": "POOL_BONUS_MINT"
              },
              {
                "kind": "account",
                "type": "publicKey",
                "account": "Pool",
                "path": "pool"
              }
            ]
          }
        },
        {
          "name": "poolJackpotTokenAccount",
          "isMut": true,
          "isSigner": false,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "type": "string",
                "value": "POOL_JACKPOT"
              },
              {
                "kind": "account",
                "type": "publicKey",
                "account": "Pool",
                "path": "pool"
              }
            ]
          }
        },
        {
          "name": "userUnderlyingAta",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "userBonusAta",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "associatedTokenProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "tokenProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "amount",
          "type": "u64"
        }
      ]
    },
    {
      "name": "poolAuthorityConfig",
      "accounts": [
        {
          "name": "user",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "gambaState",
          "isMut": false,
          "isSigner": false,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "type": "string",
                "value": "GAMBA_STATE"
              }
            ]
          }
        },
        {
          "name": "pool",
          "isMut": true,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "minWager",
          "type": "u64"
        },
        {
          "name": "depositLimit",
          "type": "bool"
        },
        {
          "name": "depositLimitAmount",
          "type": "u64"
        },
        {
          "name": "customPoolFee",
          "type": "bool"
        },
        {
          "name": "customPoolFeeBps",
          "type": "u64"
        },
        {
          "name": "customMexPayout",
          "type": "bool"
        },
        {
          "name": "customMaxPayoutBps",
          "type": "u64"
        },
        {
          "name": "depositWhitelistRequired",
          "type": "bool"
        },
        {
          "name": "depositWhitelistAddress",
          "type": "publicKey"
        }
      ]
    },
    {
      "name": "poolGambaConfig",
      "accounts": [
        {
          "name": "user",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "gambaState",
          "isMut": false,
          "isSigner": false,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "type": "string",
                "value": "GAMBA_STATE"
              }
            ]
          }
        },
        {
          "name": "pool",
          "isMut": true,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "antiSpamFeeExemption",
          "type": "bool"
        },
        {
          "name": "customGambaFee",
          "type": "bool"
        },
        {
          "name": "customGambaFeeBps",
          "type": "u64"
        }
      ]
    },
    {
      "name": "playerInitialize",
      "accounts": [
        {
          "name": "player",
          "isMut": true,
          "isSigner": false,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "type": "string",
                "value": "PLAYER"
              },
              {
                "kind": "account",
                "type": "publicKey",
                "path": "user"
              }
            ]
          }
        },
        {
          "name": "game",
          "isMut": true,
          "isSigner": false,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "type": "string",
                "value": "GAME"
              },
              {
                "kind": "account",
                "type": "publicKey",
                "path": "user"
              }
            ]
          }
        },
        {
          "name": "user",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": []
    },
    {
      "name": "playGame",
      "accounts": [
        {
          "name": "user",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "player",
          "isMut": true,
          "isSigner": false,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "type": "string",
                "value": "PLAYER"
              },
              {
                "kind": "account",
                "type": "publicKey",
                "path": "user"
              }
            ]
          }
        },
        {
          "name": "game",
          "isMut": true,
          "isSigner": false,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "type": "string",
                "value": "GAME"
              },
              {
                "kind": "account",
                "type": "publicKey",
                "path": "user"
              }
            ]
          }
        },
        {
          "name": "pool",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "underlyingTokenMint",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "bonusTokenMint",
          "isMut": false,
          "isSigner": false,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "type": "string",
                "value": "POOL_BONUS_MINT"
              },
              {
                "kind": "account",
                "type": "publicKey",
                "account": "Pool",
                "path": "pool"
              }
            ]
          }
        },
        {
          "name": "userUnderlyingAta",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "creator",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "creatorAta",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "playerAta",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "playerBonusAta",
          "isMut": true,
          "isSigner": false,
          "isOptional": true
        },
        {
          "name": "userBonusAta",
          "isMut": true,
          "isSigner": false,
          "isOptional": true
        },
        {
          "name": "gambaState",
          "isMut": true,
          "isSigner": false,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "type": "string",
                "value": "GAMBA_STATE"
              }
            ]
          }
        },
        {
          "name": "poolJackpotTokenAccount",
          "isMut": true,
          "isSigner": false,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "type": "string",
                "value": "POOL_JACKPOT"
              },
              {
                "kind": "account",
                "type": "publicKey",
                "account": "Pool",
                "path": "pool"
              }
            ]
          }
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "tokenProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "associatedTokenProgram",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "wager",
          "type": "u64"
        },
        {
          "name": "bet",
          "type": {
            "vec": "u32"
          }
        },
        {
          "name": "clientSeed",
          "type": "string"
        },
        {
          "name": "creatorFeeBps",
          "type": "u32"
        },
        {
          "name": "jackpotFeeBps",
          "type": "u32"
        },
        {
          "name": "metadata",
          "type": "string"
        }
      ]
    },
    {
      "name": "playerClose",
      "accounts": [
        {
          "name": "user",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "player",
          "isMut": true,
          "isSigner": false,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "type": "string",
                "value": "PLAYER"
              },
              {
                "kind": "account",
                "type": "publicKey",
                "path": "user"
              }
            ]
          }
        },
        {
          "name": "game",
          "isMut": true,
          "isSigner": false,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "type": "string",
                "value": "GAME"
              },
              {
                "kind": "account",
                "type": "publicKey",
                "path": "user"
              }
            ]
          }
        }
      ],
      "args": []
    },
    {
      "name": "playerClaim",
      "accounts": [
        {
          "name": "user",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "underlyingTokenMint",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "player",
          "isMut": true,
          "isSigner": false,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "type": "string",
                "value": "PLAYER"
              },
              {
                "kind": "account",
                "type": "publicKey",
                "path": "user"
              }
            ]
          }
        },
        {
          "name": "game",
          "isMut": true,
          "isSigner": false,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "type": "string",
                "value": "GAME"
              },
              {
                "kind": "account",
                "type": "publicKey",
                "path": "user"
              }
            ]
          }
        },
        {
          "name": "playerAta",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "userUnderlyingAta",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "tokenProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "associatedTokenProgram",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": []
    },
    {
      "name": "rngSettle",
      "accounts": [
        {
          "name": "rng",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "user",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "player",
          "isMut": true,
          "isSigner": false,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "type": "string",
                "value": "PLAYER"
              },
              {
                "kind": "account",
                "type": "publicKey",
                "path": "user"
              }
            ]
          }
        },
        {
          "name": "game",
          "isMut": true,
          "isSigner": false,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "type": "string",
                "value": "GAME"
              },
              {
                "kind": "account",
                "type": "publicKey",
                "path": "user"
              }
            ]
          }
        },
        {
          "name": "pool",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "underlyingTokenMint",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "poolUnderlyingTokenAccount",
          "isMut": true,
          "isSigner": false,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "type": "string",
                "value": "POOL_ATA"
              },
              {
                "kind": "account",
                "type": "publicKey",
                "account": "Pool",
                "path": "pool"
              }
            ]
          }
        },
        {
          "name": "poolBonusUnderlyingTokenAccount",
          "isMut": true,
          "isSigner": false,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "type": "string",
                "value": "POOL_BONUS_UNDERLYING_TA"
              },
              {
                "kind": "account",
                "type": "publicKey",
                "account": "Pool",
                "path": "pool"
              }
            ]
          }
        },
        {
          "name": "playerAta",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "userUnderlyingAta",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "gambaState",
          "isMut": false,
          "isSigner": false,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "type": "string",
                "value": "GAMBA_STATE"
              }
            ]
          }
        },
        {
          "name": "gambaStateAta",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "creator",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "creatorAta",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "bonusTokenMint",
          "isMut": true,
          "isSigner": false,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "type": "string",
                "value": "POOL_BONUS_MINT"
              },
              {
                "kind": "account",
                "type": "publicKey",
                "account": "Pool",
                "path": "pool"
              }
            ]
          }
        },
        {
          "name": "playerBonusAta",
          "isMut": true,
          "isSigner": false,
          "isOptional": true
        },
        {
          "name": "poolJackpotTokenAccount",
          "isMut": true,
          "isSigner": false,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "type": "string",
                "value": "POOL_JACKPOT"
              },
              {
                "kind": "account",
                "type": "publicKey",
                "account": "Pool",
                "path": "pool"
              }
            ]
          }
        },
        {
          "name": "escrowTokenAccount",
          "isMut": true,
          "isSigner": false,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "type": "string",
                "value": "ESCROW"
              },
              {
                "kind": "account",
                "type": "publicKey",
                "account": "Player",
                "path": "player"
              }
            ]
          }
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "tokenProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "associatedTokenProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "rent",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "rngSeed",
          "type": "string"
        },
        {
          "name": "nextRngSeedHashed",
          "type": "string"
        }
      ]
    },
    {
      "name": "rngProvideHashedSeed",
      "accounts": [
        {
          "name": "game",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "rng",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "gambaState",
          "isMut": true,
          "isSigner": false,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "type": "string",
                "value": "GAMBA_STATE"
              }
            ]
          }
        }
      ],
      "args": [
        {
          "name": "nextRngSeedHashed",
          "type": "string"
        }
      ]
    },
    {
      "name": "distributeFees",
      "accounts": [
        {
          "name": "signer",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "underlyingTokenMint",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "gambaState",
          "isMut": true,
          "isSigner": false,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "type": "string",
                "value": "GAMBA_STATE"
              }
            ]
          }
        },
        {
          "name": "gambaStateAta",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "distributionRecipient",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "distributionRecipientAta",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "associatedTokenProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "tokenProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "nativeSol",
          "type": "bool"
        }
      ]
    }
  ],
  "accounts": [
    {
      "name": "game",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "bump",
            "type": {
              "array": [
                "u8",
                1
              ]
            }
          },
          {
            "name": "nonce",
            "type": "u64"
          },
          {
            "name": "user",
            "type": "publicKey"
          },
          {
            "name": "tokenMint",
            "type": "publicKey"
          },
          {
            "name": "pool",
            "type": "publicKey"
          },
          {
            "name": "status",
            "type": {
              "defined": "GameStatus"
            }
          },
          {
            "name": "nextRngSeedHashed",
            "docs": [
              "SHA256 of coming rng_seed. Available at start of the game"
            ],
            "type": "string"
          },
          {
            "name": "rngSeed",
            "docs": [
              "Is revealed by the RNG after a play"
            ],
            "type": "string"
          },
          {
            "name": "timestamp",
            "type": "i64"
          },
          {
            "name": "creator",
            "type": "publicKey"
          },
          {
            "name": "creatorMeta",
            "type": "string"
          },
          {
            "name": "wager",
            "type": "u64"
          },
          {
            "name": "underlyingUsed",
            "type": "u64"
          },
          {
            "name": "bonusUsed",
            "type": "u64"
          },
          {
            "name": "creatorFee",
            "type": "u64"
          },
          {
            "name": "gambaFee",
            "type": "u64"
          },
          {
            "name": "poolFee",
            "type": "u64"
          },
          {
            "name": "jackpotFee",
            "type": "u64"
          },
          {
            "name": "jackpotResult",
            "type": "u64"
          },
          {
            "name": "jackpotProbabilityUbps",
            "type": "u64"
          },
          {
            "name": "jackpotPayout",
            "type": "u64"
          },
          {
            "name": "clientSeed",
            "type": "string"
          },
          {
            "name": "bet",
            "type": {
              "vec": "u32"
            }
          },
          {
            "name": "result",
            "type": "u64"
          },
          {
            "name": "points",
            "type": "bool"
          },
          {
            "name": "pointsAuthority",
            "type": "publicKey"
          },
          {
            "name": "metadata",
            "type": "string"
          }
        ]
      }
    },
    {
      "name": "player",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "bump",
            "type": {
              "array": [
                "u8",
                1
              ]
            }
          },
          {
            "name": "user",
            "type": "publicKey"
          },
          {
            "name": "nonce",
            "type": "u64"
          }
        ]
      }
    },
    {
      "name": "pool",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "bump",
            "type": {
              "array": [
                "u8",
                1
              ]
            }
          },
          {
            "name": "lookupAddress",
            "type": "publicKey"
          },
          {
            "name": "poolAuthority",
            "type": "publicKey"
          },
          {
            "name": "underlyingTokenMint",
            "type": "publicKey"
          },
          {
            "name": "antiSpamFeeExempt",
            "type": "bool"
          },
          {
            "name": "minWager",
            "type": "u64"
          },
          {
            "name": "plays",
            "type": "u64"
          },
          {
            "name": "liquidityCheckpoint",
            "type": "u64"
          },
          {
            "name": "depositLimit",
            "type": "bool"
          },
          {
            "name": "depositLimitAmount",
            "type": "u64"
          },
          {
            "name": "customPoolFee",
            "type": "bool"
          },
          {
            "name": "customPoolFeeBps",
            "type": "u64"
          },
          {
            "name": "customGambaFee",
            "type": "bool"
          },
          {
            "name": "customGambaFeeBps",
            "type": "u64"
          },
          {
            "name": "customMaxPayout",
            "type": "bool"
          },
          {
            "name": "customMaxPayoutBps",
            "type": "u64"
          },
          {
            "name": "customBonusTokenMint",
            "type": "publicKey"
          },
          {
            "name": "customBonusToken",
            "type": "bool"
          },
          {
            "name": "customMaxCreatorFee",
            "type": "bool"
          },
          {
            "name": "customMaxCreatorFeeBps",
            "type": "u64"
          },
          {
            "name": "depositWhitelistRequired",
            "type": "bool"
          },
          {
            "name": "depositWhitelistAddress",
            "type": "publicKey"
          }
        ]
      }
    },
    {
      "name": "gambaState",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "authority",
            "type": "publicKey"
          },
          {
            "name": "rngAddress",
            "type": "publicKey"
          },
          {
            "name": "rngAddress2",
            "type": "publicKey"
          },
          {
            "name": "antiSpamFee",
            "type": "u64"
          },
          {
            "name": "gambaFeeBps",
            "type": "u64"
          },
          {
            "name": "poolCreationFee",
            "type": "u64"
          },
          {
            "name": "defaultPoolFee",
            "type": "u64"
          },
          {
            "name": "jackpotPayoutToUserBps",
            "type": "u64"
          },
          {
            "name": "jackpotPayoutToCreatorBps",
            "type": "u64"
          },
          {
            "name": "jackpotPayoutToPoolBps",
            "type": "u64"
          },
          {
            "name": "jackpotPayoutToGambaBps",
            "type": "u64"
          },
          {
            "name": "bonusToJackpotRatioBps",
            "type": "u64"
          },
          {
            "name": "maxHouseEdgeBps",
            "type": "u64"
          },
          {
            "name": "maxCreatorFeeBps",
            "type": "u64"
          },
          {
            "name": "maxPayoutBps",
            "type": "u64"
          },
          {
            "name": "poolWithdrawFeeBps",
            "type": "u64"
          },
          {
            "name": "poolCreationAllowed",
            "type": "bool"
          },
          {
            "name": "poolDepositAllowed",
            "type": "bool"
          },
          {
            "name": "poolWithdrawAllowed",
            "type": "bool"
          },
          {
            "name": "playingAllowed",
            "type": "bool"
          },
          {
            "name": "distributionRecipient",
            "type": "publicKey"
          },
          {
            "name": "bump",
            "type": {
              "array": [
                "u8",
                1
              ]
            }
          }
        ]
      }
    }
  ],
  "types": [
    {
      "name": "PlayerError",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "NotReadyToPlay"
          },
          {
            "name": "CreatorFeeTooHigh"
          },
          {
            "name": "WagerTooSmall"
          },
          {
            "name": "TooFewBetOutcomes"
          },
          {
            "name": "TooManyBetOutcomes"
          },
          {
            "name": "PlayerAdvantage"
          },
          {
            "name": "HouseAdvantageTooHigh"
          },
          {
            "name": "MaxPayoutExceeded"
          }
        ]
      }
    },
    {
      "name": "RngError",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "Generic"
          },
          {
            "name": "InitialHashedSeedAlreadyProvided"
          },
          {
            "name": "IncorrectRngSeed"
          },
          {
            "name": "ResultNotRequested"
          }
        ]
      }
    },
    {
      "name": "GambaStateError",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "PlaysNotAllowed"
          },
          {
            "name": "DepositNotAllowed"
          },
          {
            "name": "WithdrawalNotAllowed"
          },
          {
            "name": "PoolCreationNotAllowed"
          },
          {
            "name": "DepositLimitExceeded"
          },
          {
            "name": "DepositWhitelistRequired"
          }
        ]
      }
    },
    {
      "name": "PoolAction",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "Deposit"
          },
          {
            "name": "Withdraw"
          }
        ]
      }
    },
    {
      "name": "GameStatus",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "None"
          },
          {
            "name": "NotInitialized"
          },
          {
            "name": "Ready"
          },
          {
            "name": "ResultRequested"
          }
        ]
      }
    }
  ],
  "events": [
    {
      "name": "GameSettled",
      "fields": [
        {
          "name": "user",
          "type": "publicKey",
          "index": false
        },
        {
          "name": "pool",
          "type": "publicKey",
          "index": false
        },
        {
          "name": "tokenMint",
          "type": "publicKey",
          "index": false
        },
        {
          "name": "creator",
          "type": "publicKey",
          "index": false
        },
        {
          "name": "creatorFee",
          "type": "u64",
          "index": false
        },
        {
          "name": "gambaFee",
          "type": "u64",
          "index": false
        },
        {
          "name": "poolFee",
          "type": "u64",
          "index": false
        },
        {
          "name": "jackpotFee",
          "type": "u64",
          "index": false
        },
        {
          "name": "underlyingUsed",
          "type": "u64",
          "index": false
        },
        {
          "name": "bonusUsed",
          "type": "u64",
          "index": false
        },
        {
          "name": "wager",
          "type": "u64",
          "index": false
        },
        {
          "name": "payout",
          "type": "u64",
          "index": false
        },
        {
          "name": "multiplierBps",
          "type": "u32",
          "index": false
        },
        {
          "name": "payoutFromBonusPool",
          "type": "u64",
          "index": false
        },
        {
          "name": "payoutFromNormalPool",
          "type": "u64",
          "index": false
        },
        {
          "name": "jackpotProbabilityUbps",
          "type": "u64",
          "index": false
        },
        {
          "name": "jackpotResult",
          "type": "u64",
          "index": false
        },
        {
          "name": "nonce",
          "type": "u64",
          "index": false
        },
        {
          "name": "clientSeed",
          "type": "string",
          "index": false
        },
        {
          "name": "resultIndex",
          "type": "u64",
          "index": false
        },
        {
          "name": "bet",
          "type": {
            "vec": "u32"
          },
          "index": false
        },
        {
          "name": "jackpotPayoutToUser",
          "type": "u64",
          "index": false
        },
        {
          "name": "poolLiquidity",
          "type": "u64",
          "index": false
        },
        {
          "name": "rngSeed",
          "type": "string",
          "index": false
        },
        {
          "name": "nextRngSeedHashed",
          "type": "string",
          "index": false
        },
        {
          "name": "metadata",
          "type": "string",
          "index": false
        }
      ]
    },
    {
      "name": "PoolChange",
      "fields": [
        {
          "name": "user",
          "type": "publicKey",
          "index": false
        },
        {
          "name": "pool",
          "type": "publicKey",
          "index": false
        },
        {
          "name": "tokenMint",
          "type": "publicKey",
          "index": false
        },
        {
          "name": "action",
          "type": {
            "defined": "PoolAction"
          },
          "index": false
        },
        {
          "name": "amount",
          "type": "u64",
          "index": false
        },
        {
          "name": "postLiquidity",
          "type": "u64",
          "index": false
        },
        {
          "name": "lpSupply",
          "type": "u64",
          "index": false
        }
      ]
    }
  ],
  "errors": [
    {
      "code": 6e3,
      "name": "GenericError",
      "msg": "Something went wrong"
    },
    {
      "code": 6001,
      "name": "Unauthorized",
      "msg": "Unauthorized"
    }
  ]
};

// src/utils.ts
import { BorshAccountsCoder } from "@coral-xyz/anchor";
import { AccountLayout, NATIVE_MINT, getAssociatedTokenAddressSync } from "@solana/spl-token";
import { PublicKey as PublicKey2 } from "@solana/web3.js";
var hmac256 = async (secretKey, message) => {
  const encoder = new TextEncoder();
  const messageUint8Array = encoder.encode(message);
  const keyUint8Array = encoder.encode(secretKey);
  const cryptoKey = await crypto.subtle.importKey("raw", keyUint8Array, { name: "HMAC", hash: "SHA-256" }, false, ["sign"]);
  const signature = await crypto.subtle.sign("HMAC", cryptoKey, messageUint8Array);
  return Array.from(new Uint8Array(signature)).map((b) => b.toString(16).padStart(2, "0")).join("");
};
var getGameHash = (rngSeed, clientSeed, nonce) => {
  return hmac256(rngSeed, [clientSeed, nonce].join("-"));
};
var getResultNumber = async (rngSeed, clientSeed, nonce) => {
  const hash = await getGameHash(rngSeed, clientSeed, nonce);
  return parseInt(hash.substring(0, 5), 16);
};
var accountsCoder = new BorshAccountsCoder(IDL);
var decodeAccount = (accountName, info) => {
  if (!info?.data?.length)
    return null;
  return accountsCoder.decode(accountName, info.data);
};
var decodeAta = (acc) => {
  if (!acc)
    return null;
  return AccountLayout.decode(acc.data);
};
var makeDecoder = (accountName) => {
  return (info) => {
    return decodeAccount(accountName, info);
  };
};
var decodePlayer = makeDecoder("player");
var decodeGame = makeDecoder("game");
var decodePool = makeDecoder("pool");
var decodeGambaState = makeDecoder("gambaState");
var BPS_PER_WHOLE = 1e4;
var basisPoints = (percent) => {
  return Math.round(percent * BPS_PER_WHOLE);
};
var getPdaAddress = (...seeds) => {
  const [address] = PublicKey2.findProgramAddressSync(seeds, PROGRAM_ID);
  return address;
};
var getPoolAddress = (underlyingMint, authority = new PublicKey2("11111111111111111111111111111111")) => getPdaAddress(
  Buffer.from(POOL_SEED),
  underlyingMint.toBytes(),
  authority.toBytes()
);
var getGambaStateAddress = () => getPdaAddress(
  Buffer.from(GAMBA_STATE_SEED)
);
var getPlayerAddress = (owner) => getPdaAddress(
  Buffer.from(PLAYER_SEED),
  owner.toBytes()
);
var getGameAddress = (owner) => getPdaAddress(
  Buffer.from(GAME_SEED),
  owner.toBytes()
);
var getPoolLpAddress = (pool) => getPdaAddress(
  Buffer.from(POOL_LP_MINT_SEED),
  pool.toBytes()
);
var getPoolBonusAddress = (pool) => getPdaAddress(
  Buffer.from(POOL_BONUS_MINT_SEED),
  pool.toBytes()
);
var getPoolUnderlyingTokenAccountAddress = (pool) => getPdaAddress(
  Buffer.from(POOL_ATA_SEED),
  pool.toBytes()
);
var getPoolJackpotTokenAccountAddress = (pool) => getPdaAddress(
  Buffer.from(POOL_JACKPOT_SEED),
  pool.toBytes()
);
var getPoolBonusUnderlyingTokenAccountAddress = (pool) => getPdaAddress(
  Buffer.from(POOL_BONUS_UNDERLYING_TA_SEED),
  pool.toBytes()
);
var getUserUnderlyingAta = (user, underlyingTokenMint) => getAssociatedTokenAddressSync(
  underlyingTokenMint,
  user
);
var getPlayerUnderlyingAta = (user, underlyingTokenMint) => getAssociatedTokenAddressSync(
  underlyingTokenMint,
  getPlayerAddress(user),
  true
);
var getUserBonusAtaForPool = (user, pool) => getAssociatedTokenAddressSync(
  getPoolBonusAddress(pool),
  user
);
var getUserLpAtaForPool = (user, pool) => getAssociatedTokenAddressSync(
  getPoolLpAddress(pool),
  user
);
var getPlayerBonusAtaForPool = (user, pool) => getAssociatedTokenAddressSync(
  getPoolBonusAddress(pool),
  getPlayerAddress(user),
  true
);
var getUserWsolAccount = (user) => {
  return getAssociatedTokenAddressSync(NATIVE_MINT, user, true);
};
var isNativeMint = (pubkey) => NATIVE_MINT.equals(pubkey);
var parseResult = (state) => {
  const clientSeed = state.clientSeed;
  const bet = state.bet.map((x) => x / 1e4);
  const nonce = state.nonce.toNumber() - 1;
  const rngSeed = state.rngSeed;
  const resultIndex = state.result.toNumber();
  const multiplier = bet[resultIndex];
  const wager = state.wager.toNumber();
  const payout = wager * multiplier;
  const profit = payout - wager;
  return {
    creator: state.creator,
    user: state.user,
    rngSeed,
    clientSeed,
    nonce,
    bet,
    resultIndex,
    wager,
    payout,
    profit,
    multiplier,
    token: state.tokenMint,
    bonusUsed: state.bonusUsed.toNumber(),
    jackpotWin: state.jackpotPayout.toNumber()
  };
};
async function getNextResult(connection, user, prevNonce) {
  return new Promise((resolve, reject) => {
    const listener = connection.onAccountChange(
      getGameAddress(user),
      async (account) => {
        const current = decodeGame(account);
        if (!current) {
          connection.removeAccountChangeListener(listener);
          return reject("Game account was closed");
        }
        if (current.nonce.toNumber() === prevNonce + 1) {
          connection.removeAccountChangeListener(listener);
          const result = await parseResult(current);
          return resolve(result);
        }
      }
    );
  });
}

// src/GambaProvider.ts
import NodeWallet from "@coral-xyz/anchor/dist/cjs/nodewallet";
var GambaProvider = class _GambaProvider {
  gambaProgram;
  anchorProvider;
  wallet;
  constructor(connection, walletOrKeypair, opts = anchor.AnchorProvider.defaultOptions()) {
    const wallet = walletOrKeypair instanceof Keypair ? new NodeWallet(walletOrKeypair) : walletOrKeypair;
    this.anchorProvider = new anchor.AnchorProvider(
      connection,
      wallet,
      opts
    );
    this.gambaProgram = new anchor.Program(IDL, PROGRAM_ID, this.anchorProvider);
    this.wallet = wallet;
  }
  static fromAnchorProvider(provider) {
    const gambaProvider = new _GambaProvider(
      provider.connection,
      provider.wallet,
      provider.opts
    );
    return gambaProvider;
  }
  get user() {
    return this.wallet.publicKey;
  }
  /**
   * Creates a pool for the specified token with address lookup table
   * @param underlyingTokenMint The token to use for the pool
   * @param authority The authority for the pool
   * @param slot The slot to use for the lookup table instruction
   * @returns Multiple TransactionInstruction in an array
   */
  createPool(underlyingTokenMint, authority, slot) {
    const gambaStateAta = getAssociatedTokenAddressSync2(
      underlyingTokenMint,
      getGambaStateAddress(),
      true
    );
    const METADATA_SEED = "metadata";
    const TOKEN_METADATA_PROGRAM_ID = new PublicKey3("metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s");
    const pool = getPoolAddress(underlyingTokenMint, authority);
    const lpMint = getPoolLpAddress(pool);
    const bonusMint = getPoolBonusAddress(pool);
    const poolUnderlyingTokenAccount = getPoolUnderlyingTokenAccountAddress(pool);
    const [poolBonusUnderlyingTokenAccount] = PublicKey3.findProgramAddressSync([Buffer.from("POOL_BONUS_UNDERLYING_TA"), pool.toBuffer()], PROGRAM_ID);
    const [lpMintMetadata] = PublicKey3.findProgramAddressSync([Buffer.from(METADATA_SEED), TOKEN_METADATA_PROGRAM_ID.toBuffer(), lpMint.toBuffer()], TOKEN_METADATA_PROGRAM_ID);
    const [bonusMintMetadata] = PublicKey3.findProgramAddressSync([Buffer.from(METADATA_SEED), TOKEN_METADATA_PROGRAM_ID.toBuffer(), bonusMint.toBuffer()], TOKEN_METADATA_PROGRAM_ID);
    const gamba_state = getGambaStateAddress();
    const poolJackpotTokenAccount = PublicKey3.findProgramAddressSync([Buffer.from("POOL_JACKPOT"), pool.toBuffer()], PROGRAM_ID)[0];
    const [lookupTableInst, lookupTableAddress] = AddressLookupTableProgram.createLookupTable({
      authority: this.wallet.publicKey,
      payer: this.wallet.publicKey,
      recentSlot: slot - 1
    });
    const addAddressesInstruction = AddressLookupTableProgram.extendLookupTable({
      payer: this.wallet.publicKey,
      authority: this.wallet.publicKey,
      lookupTable: lookupTableAddress,
      addresses: [
        pool,
        underlyingTokenMint,
        poolUnderlyingTokenAccount,
        poolBonusUnderlyingTokenAccount,
        gamba_state,
        gambaStateAta,
        bonusMint,
        poolJackpotTokenAccount
      ]
    });
    const freezeInstruction = AddressLookupTableProgram.freezeLookupTable({
      authority: this.wallet.publicKey,
      lookupTable: lookupTableAddress
    });
    const createPoolInstruction = this.gambaProgram.methods.poolInitialize(authority, lookupTableAddress).accounts({
      initializer: this.wallet.publicKey,
      gambaState: getGambaStateAddress(),
      underlyingTokenMint,
      pool,
      poolUnderlyingTokenAccount,
      poolBonusUnderlyingTokenAccount,
      gambaStateAta,
      lpMint,
      lpMintMetadata,
      bonusMint,
      bonusMintMetadata,
      associatedTokenProgram: ASSOCIATED_TOKEN_PROGRAM_ID,
      tokenProgram: TOKEN_PROGRAM_ID,
      systemProgram: SystemProgram.programId,
      rent: SYSVAR_RENT_PUBKEY,
      tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID
    }).instruction();
    return [lookupTableInst, addAddressesInstruction, freezeInstruction, createPoolInstruction];
  }
  /**
   *
   * @param pool The pool to deposit to
   * @param underlyingTokenMint Token to deposit (Has to be the same as pool.underlyingTokenMint)
   * @param amount Amount of tokens to deposit
   */
  depositToPool(pool, underlyingTokenMint, amount) {
    const poolUnderlyingTokenAccount = getPoolUnderlyingTokenAccountAddress(pool);
    const poolLpMint = getPoolLpAddress(pool);
    const userUnderlyingAta = getAssociatedTokenAddressSync2(
      underlyingTokenMint,
      this.wallet.publicKey
    );
    const userLpAta = getAssociatedTokenAddressSync2(
      poolLpMint,
      this.wallet.publicKey
    );
    return this.gambaProgram.methods.poolDeposit(new anchor.BN(amount)).accounts({
      pool,
      underlyingTokenMint,
      poolUnderlyingTokenAccount,
      userUnderlyingAta,
      userLpAta
    }).instruction();
  }
  /**
   *
   * @param pool The pool to withdraw from
   * @param underlyingTokenMint Token to withdraw (Has to be the same as pool.underlyingTokenMint)
   * @param amount Amount of tokens to withdraw
   */
  withdrawFromPool(pool, underlyingTokenMint, amount) {
    const poolUnderlyingTokenAccount = getPoolUnderlyingTokenAccountAddress(pool);
    const poolLpMint = getPoolLpAddress(pool);
    const userUnderlyingAta = getAssociatedTokenAddressSync2(
      underlyingTokenMint,
      this.wallet.publicKey
    );
    const userLpAta = getAssociatedTokenAddressSync2(
      poolLpMint,
      this.wallet.publicKey
    );
    return this.gambaProgram.methods.poolWithdraw(new anchor.BN(amount)).accounts({
      pool,
      underlyingTokenMint,
      poolUnderlyingTokenAccount,
      userUnderlyingAta,
      userLpAta
    }).instruction();
  }
  /**
   * Mints bonus tokens that can be used as free plays in the pool
   * @param pool Pool to mint bonus tokens for
   * @param underlyingTokenMint Token to mint bonus tokens for (Has to be equal to pool.underlyingTokenMint)
   * @param amount Amount of bonus tokens to mint
   */
  mintBonusTokens(pool, underlyingTokenMint, amount) {
    const poolBonusMint = getPoolBonusAddress(pool);
    const userUnderlyingAta = getAssociatedTokenAddressSync2(
      underlyingTokenMint,
      this.wallet.publicKey
    );
    const userBonusAta = getAssociatedTokenAddressSync2(
      poolBonusMint,
      this.wallet.publicKey
    );
    return this.gambaProgram.methods.poolMintBonusTokens(new anchor.BN(amount)).accounts({
      pool,
      user: this.wallet.publicKey,
      underlyingTokenMint,
      userUnderlyingAta,
      userBonusAta
    }).instruction();
  }
  /**
   * Initializes an associated Player account for the connected wallet
   */
  createPlayer() {
    return this.gambaProgram.methods.playerInitialize().accounts({}).instruction();
  }
  /**
   * Closes the associated Player account for the connected wallet
   */
  closePlayer() {
    const gameAddress = getGameAddress(this.user);
    return this.gambaProgram.methods.playerClose().accounts({ game: gameAddress }).instruction();
  }
  play(wager, bet, clientSeed, pool, underlyingTokenMint, creator, creatorFee, jackpotFee, metadata, useBonus) {
    const player = getPlayerAddress(this.user);
    const userUnderlyingAta = getAssociatedTokenAddressSync2(
      underlyingTokenMint,
      this.user
    );
    const creatorAta = getAssociatedTokenAddressSync2(
      underlyingTokenMint,
      creator
    );
    const playerAta = getAssociatedTokenAddressSync2(
      underlyingTokenMint,
      player,
      true
    );
    const bonusMint = getPoolBonusAddress(pool);
    const userBonusAta = getAssociatedTokenAddressSync2(
      bonusMint,
      this.user
    );
    const playerBonusAta = getAssociatedTokenAddressSync2(
      bonusMint,
      getPlayerAddress(this.user),
      true
    );
    return this.gambaProgram.methods.playGame(
      new anchor.BN(wager),
      bet.map(basisPoints),
      clientSeed,
      basisPoints(creatorFee),
      basisPoints(jackpotFee),
      metadata
    ).accounts({
      pool,
      userUnderlyingAta,
      underlyingTokenMint,
      creator,
      creatorAta,
      playerAta,
      playerBonusAta: useBonus ? playerBonusAta : null,
      userBonusAta: useBonus ? userBonusAta : null
    }).instruction();
  }
};

// src/events.ts
import { BorshCoder, EventParser } from "@coral-xyz/anchor";
var eventParser = new EventParser(PROGRAM_ID, new BorshCoder(IDL));
var parseTransactionEvents = (logs) => {
  try {
    const parsedEvents = [];
    const events = eventParser.parseLogs(logs);
    for (const event of events) {
      parsedEvents.push(event);
    }
    return parsedEvents;
  } catch {
    return [];
  }
};
var parseGambaTransaction = (transaction) => {
  const logs = transaction.meta?.logMessages ?? [];
  const events = parseTransactionEvents(logs);
  return events.map((event) => {
    return {
      signature: transaction.transaction.signatures[0],
      time: (transaction.blockTime ?? 0) * 1e3,
      name: event.name,
      data: event.data
    };
  });
};
async function fetchGambaTransactionsFromSignatures(connection, signatures) {
  const transactions = (await connection.getParsedTransactions(
    signatures,
    {
      maxSupportedTransactionVersion: 0,
      commitment: "confirmed"
    }
  )).flatMap((x) => x ? [x] : []);
  return transactions.flatMap(parseGambaTransaction);
}
async function fetchGambaTransactions(connection, address, options) {
  const signatureInfo = await connection.getSignaturesForAddress(
    address,
    options,
    "confirmed"
  );
  const events = await fetchGambaTransactionsFromSignatures(connection, signatureInfo.map((x) => x.signature));
  return events;
}

// src/instructions.ts
import { NATIVE_MINT as NATIVE_MINT2, createAssociatedTokenAccountInstruction, createCloseAccountInstruction, createSyncNativeInstruction } from "@solana/spl-token";
import { SystemProgram as SystemProgram2 } from "@solana/web3.js";
var wrapSol = async (from, amount, create) => {
  const wsolAta = getUserWsolAccount(from);
  const instructions = [
    SystemProgram2.transfer({
      fromPubkey: from,
      toPubkey: wsolAta,
      lamports: amount
    }),
    createSyncNativeInstruction(wsolAta)
  ];
  if (create) {
    return [
      createAssociatedTokenAccountInstruction(
        from,
        wsolAta,
        from,
        NATIVE_MINT2
      ),
      ...instructions
    ];
  }
  return instructions;
};
var unwrapSol = async (from) => {
  const wsolAta = getUserWsolAccount(from);
  return createCloseAccountInstruction(
    wsolAta,
    from,
    from
  );
};
export {
  BPS_PER_WHOLE,
  GAMBA_STATE_SEED,
  GAME_SEED,
  GambaProvider,
  IDL,
  NATIVE_MINT3 as NATIVE_MINT,
  PLAYER_SEED,
  POOL_ATA_SEED,
  POOL_BONUS_MINT_SEED,
  POOL_BONUS_UNDERLYING_TA_SEED,
  POOL_JACKPOT_SEED,
  POOL_LP_MINT_SEED,
  POOL_SEED,
  PROGRAM_ID,
  SYSTEM_PROGRAM,
  basisPoints,
  decodeAta,
  decodeGambaState,
  decodeGame,
  decodePlayer,
  decodePool,
  fetchGambaTransactions,
  fetchGambaTransactionsFromSignatures,
  getGambaStateAddress,
  getGameAddress,
  getGameHash,
  getNextResult,
  getPdaAddress,
  getPlayerAddress,
  getPlayerBonusAtaForPool,
  getPlayerUnderlyingAta,
  getPoolAddress,
  getPoolBonusAddress,
  getPoolBonusUnderlyingTokenAccountAddress,
  getPoolJackpotTokenAccountAddress,
  getPoolLpAddress,
  getPoolUnderlyingTokenAccountAddress,
  getResultNumber,
  getUserBonusAtaForPool,
  getUserLpAtaForPool,
  getUserUnderlyingAta,
  getUserWsolAccount,
  hmac256,
  isNativeMint,
  parseGambaTransaction,
  parseResult,
  parseTransactionEvents,
  unwrapSol,
  wrapSol
};
